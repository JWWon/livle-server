service: livle-server

provider:
  name: aws
  runtime: nodejs6.10
  region: ap-northeast-2
  stage: dev
  profile: livle-serverless
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
  environment:
    DB_NAME: ${file(./keys.yml):DB_NAME}
    DB_HOST: ${file(./keys.yml):DB_HOST}
    DB_PORT: ${file(./keys.yml):DB_PORT}
    DB_USER: ${file(./keys.yml):DB_USER}
    DB_PASS: ${file(./keys.yml):DB_PASS}
  vpc:
    securityGroupIds:
      - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
    subnetIds:
      - Ref: ServerlessSubnetA
      - Ref: ServerlessSubnetB

functions:
  userCreate:
    handler: handler.userCreate
    events:
      - http:
          path: user
          method: post
          cors: true
  userGet:
    handler: handler.userGet
    events:
      - http:
          path: user
          method: get
          cors: true
  userDestroy:
    handler: handler.userDestroy
    events:
      - http:
          path: user
          method: delete
          cors: true
  sessionGet:
    handler: handler.sessionGet
    events:
      - http:
          path: session
          method: get
          cors: true

resources:
  Resources:
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    ServerlessSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.0.0/24"
    ServerlessSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.1.0/24"
    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
    ServerlessStorageSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Memcached Cluster & RDS Instance
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            SourceSecurityGroupId:
              Ref: ServerlessSecurityGroup
          - IpProtocol: tcp
            FromPort: '11211'
            ToPort: '11211'
            SourceSecurityGroupId:
              Ref: ServerlessSecurityGroup
    ServerlessRDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - Ref: ServerlessSubnetA
          - Ref: ServerlessSubnetB
    ServerlessRDSCluster:
      DependsOn: ServerlessStorageSecurityGroup
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: mariadb
        DBName: ${file(./keys.yml):DB_NAME}
        MasterUsername: ${file(./keys.yml):DB_USER}
        MasterUserPassword: ${file(./keys.yml):DB_PASS}
        DBInstanceClass: db.t2.micro
        AllocatedStorage: 10
        VPCSecurityGroups:
        - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: ServerlessRDSSubnetGroup
